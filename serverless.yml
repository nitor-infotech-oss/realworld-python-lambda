service: realworld-python-lambda # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

#plugins:
#  - serverless-python-requirements

#custom:
#  pythonRequirements:
#    dockerizePip: non-linux
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

functions:
  # User API
  create_user:
    handler: src/user.create_user
    events:
      - http:
          path: /api/users
          method: post
          cors: true

  login_user:
    handler: src/user.login_user
    events:
      - http:
          path: /api/users/login
          method: POST
          cors: true

  get_user:
    handler: src/user.get_user
    events:
      - http:
          path: /api/user
          method: GET
          cors: true

  update_user:
    handler: src/user.update_user
    events:
      - http:
          path: /api/user
          method: PUT
          cors: true

  get_profile:
    handler: src/user.get_profile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  follow_user:
    handler: src/user.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  unfollow_user:
    handler: src/user.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  # Comment API
  create_comment:
    handler: src/comment.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  get_comments:
    handler: src/comment.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  delete_comment:
    handler: src/comment.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true

resources:
  Resources:

    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          - IndexName: email
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: slug
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          - IndexName: article
            KeySchema:
              - AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1