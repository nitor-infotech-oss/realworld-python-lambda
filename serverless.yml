# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: realworld-python-lambda # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"


functions:
  create_user:
    handler: src/user.create_user
    events:
      - http:
          path: /api/users
          method: post
          cors: true
  login_user:
    handler: src/user.login_user
    events:
      - http:
          path: /api/users/login
          method: POST
          cors: true
  get_user:
    handler: src/user.get_user
    events:
      - http:
          path: /api/user
          method: GET
          cors: true
  update_user:
    handler: src/user.update_user
    events:
      - http:
          path: /api/user
          method: PUT
          cors: true
  get_profile:
    handler: src/user.get_profile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

resources:
  Resources:

    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          - IndexName: email
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
