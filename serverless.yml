service: realworld-python-lambdas # NOTE: update this with your service name


provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

plugins:
  - serverless-python-requirements


functions:
  # User API
  create_user:
    handler: src/user.create_user
    events:
      - http:
          path: /api/users
          method: post
          cors: true

  login_user:
    handler: src/user.login_user
    events:
      - http:
          path: /api/users/login
          method: POST
          cors: true

  get_user:
    handler: src/user.get_user
    events:
      - http:
          path: /api/user
          method: GET
          cors: true

  update_user:
    handler: src/user.update_user
    events:
      - http:
          path: /api/user
          method: PUT
          cors: true

  get_profile:
    handler: src/user.get_profile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  follow_user:
    handler: src/user.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  unfollow_user:
    handler: src/user.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  # Article API
  create_article:
    handler: src/article.create_article
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true

  get_article:
    handler: src/article.get_article
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true

  update_article:
    handler: src/article.update_article
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true

  delete_article:
    handler: src/article.delete_article
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true

  favorite_article:
    handler: src/article.favorite_article
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true

  unfavorite_article:
    handler: src/article.favorite_article
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true

  list_article:
    handler: src/article.list_article
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true

  get_feed:
    handler: src/article.get_feed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true

  get_tags:
    handler: src/article.get_tags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true

  # Comment API
  create_comment:
    handler: src/comment.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  get_comments:
    handler: src/comment.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  delete_comment:
    handler: src/comment.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true


resources:
  Resources:

    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-user
        GlobalSecondaryIndexes:
          - IndexName: email
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: dummy
            AttributeType: S
          - AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-article
        GlobalSecondaryIndexes:
          - IndexName: updatedAt
            KeySchema:
              - AttributeName: dummy
                KeyType: HASH
              - AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: slug
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          - IndexName: article
            KeySchema:
              - AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


